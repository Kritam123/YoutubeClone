// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  username       String           @unique
  imageUrl       String
  externalUserId String           @unique
  channel        Channel?
  videos         Video[]
  Comment        Comment[]        @relation(name: "commnetBy")
  pinned         Comment[]        @relation(name: "pinnedBy")
  Like           Like[]
  subscribedby   Subscribed[]     @relation(name: "subscribedby")
  DisLike        DisLike[]
  CommentLike    CommentLike[]
  CommentDisLike CommentDisLike[]
  views          Views[]
}

model Channel {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  displayName   String       @unique
  description   String?
  imageUrl      String?
  bannerImage   String?
  bannerVideo   Video?       @relation(name: "bannerVideoId", fields: [bannerVideoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bannerVideoId String?      @unique @db.ObjectId
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @unique @db.ObjectId
  videos        Video[]      @relation(name: "channelId")
  playlists     Playlist[]
  Subscribed    Subscribed[]
}

model Subscribed {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  subscribedby User?    @relation(name: "subscribedby", fields: [subscribedId], references: [id])
  subscribedId String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  channel      Channel? @relation(fields: [channelId], references: [id])
  channelId    String   @db.ObjectId

  @@index([channelId])
}

model Playlist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  channel     Channel  @relation(fields: [channelId], references: [id])
  channelId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([channelId])
}

model Video {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  videoUrl     String
  thumbnailUrl String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User?     @relation(fields: [userId], references: [id])
  userId       String    @db.ObjectId
  channel      Channel?  @relation(name: "channelId", fields: [channelId], references: [id])
  bannerVideo  Channel?  @relation(name: "bannerVideoId")
  channelId    String    @db.ObjectId
  comments     Comment[]
  likes        Like[]
  videoType    String
  disLikes     DisLike[]
  views        Views[]

  @@index([channelId, userId])
}

model Comment {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  text           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(name: "commnetBy", fields: [userId], references: [id])
  userId         String           @db.ObjectId
  video          Video            @relation(fields: [videoId], references: [id])
  videoId        String           @db.ObjectId
  parent         Comment?         @relation(name: "ChildComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId       String?          @db.ObjectId
  pinnedBy       User?            @relation(name: "pinnedBy", fields: [pinnedId], references: [id])
  pinnedId       String?          @db.ObjectId
  pinned         Boolean?         @default(false)
  isEdited       Boolean?         @default(false)
  isLove         Boolean?         @default(false)
  relpyComments  Comment[]        @relation(name: "ChildComments")
  CommentLike    CommentLike[]
  CommentDisLike CommentDisLike[]

  @@index([userId, videoId, parentId, pinnedId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String   @db.ObjectId

  @@index([videoId, userId])
}

model DisLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String   @db.ObjectId

  @@index([videoId, userId])
}

model CommentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
}

model CommentDisLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
}

model Views {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String   @db.ObjectId

  @@index([userId, videoId])
}
